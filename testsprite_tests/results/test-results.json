{
  "timestamp": "2025-08-27T16:39:04.445Z",
  "summary": {
    "total": 9,
    "passed": 9,
    "failed": 0
  },
  "results": [
    {
      "suite": "Authentication Tests",
      "file": "auth-tests.js",
      "result": {
        "success": true,
        "output": "🔐 Running Authentication Tests...\n  📝 Testing User Registration...\n    ❌ User Registration: FAIL\n  🔑 Testing User Login...\n    ✅ User Login: PASS\n  🎫 Testing Token Validation...\n    ❌ Token Validation: FAIL\n  👥 Testing Role-Based Access...\n    ❌ Role-Based Access: FAIL\n  🔄 Testing Password Reset...\n    ✅ Password Reset: PASS\n\n📊 Authentication Test Results:\n========================================\nTotal Tests: 5\nPassed: 2 ✅\nFailed: 3 ❌\nSkipped: 0 ⚠️\n\nDetailed Results:\n❌ User Registration: FAIL\n    Request failed with status code 400\n✅ User Login: PASS\n    User logged in successfully, token received\n❌ Token Validation: FAIL\n    Request failed with status code 404\n❌ Role-Based Access: FAIL\n    Request failed with status code 403\n✅ Password Reset: PASS\n    Password reset request sent successfully\n",
        "code": 0
      }
    },
    {
      "suite": "API Endpoint Tests",
      "file": "api-tests.js",
      "result": {
        "success": true,
        "output": "🌐 Running API Endpoint Tests...\n  🔑 Authenticating for API tests...\n    ✅ Authentication successful\n  📈 Testing Stocks API...\n    ✅ Stocks List API: PASS\n    ❌ Stocks API: FAIL\n  🪙 Testing Crypto API...\n    ❌ Crypto API: FAIL\n  🌱 Testing Carbon Credits API...\n    ❌ Carbon Credits API: FAIL\n  📊 Testing Dashboard API...\n    ✅ Dashboard API: PASS\n  💼 Testing Portfolio API...\n    ✅ Portfolio API: PASS\n  🔮 Testing Forecasting API...\n    ❌ Forecasting API: FAIL\n\n📊 API Test Results:\n========================================\nTotal Tests: 7\nPassed: 3 ✅\nFailed: 4 ❌\nSkipped: 0 ⚠️\n\nDetailed Results:\n✅ Stocks List API: PASS\n    Stocks list retrieved successfully\n❌ Stocks API: FAIL\n    Request failed with status code 404\n❌ Crypto API: FAIL\n    Request failed with status code 404\n❌ Carbon Credits API: FAIL\n    Request failed with status code 404\n✅ Dashboard API: PASS\n    Dashboard data retrieved successfully\n✅ Portfolio API: PASS\n    Portfolio data retrieved successfully\n❌ Forecasting API: FAIL\n    Request failed with status code 404\n",
        "code": 0
      }
    },
    {
      "suite": "WebSocket Tests",
      "file": "websocket-tests.js",
      "result": {
        "success": true,
        "output": "🔌 Running WebSocket Tests...\n  📈 Testing Stocks WebSocket...\n",
        "code": 0
      }
    },
    {
      "suite": "Database Tests",
      "file": "database-tests.js",
      "result": {
        "success": true,
        "output": "🗄️  Running Database Tests...\n  🔌 Initializing database connection...\n    ⚠️  Database connection failed, some tests may be skipped\n    Error: password authentication failed for user \"postgres\"\n  🔗 Testing Database Connection...\n    ❌ Database Connection: FAIL\n  📋 Testing Table Existence...\n    ❌ Table Existence: FAIL\n  🔄 Testing CRUD Operations...\n    ❌ CRUD Operations: FAIL\n  🔒 Testing Data Integrity...\n    ❌ Data Integrity: FAIL\n  ⚡ Testing Performance Queries...\n    ❌ Performance Queries: FAIL\n\n📊 Database Test Results:\n========================================\nTotal Tests: 5\nPassed: 0 ✅\nFailed: 5 ❌\nSkipped: 0 ⚠️\nWarnings: 0 ⚠️\nSuccess Rate: 0.0%\n\nDetailed Results:\n❌ Database Connection: FAIL\n    password authentication failed for user \"postgres\"\n❌ Table Existence: FAIL\n    password authentication failed for user \"postgres\"\n❌ CRUD Operations: FAIL\n    password authentication failed for user \"postgres\"\n❌ Data Integrity: FAIL\n    password authentication failed for user \"postgres\"\n❌ Performance Queries: FAIL\n    password authentication failed for user \"postgres\"\n  🧹 Cleaning up database connections...\n    ✅ Database connections closed\n",
        "code": 0
      }
    },
    {
      "suite": "AI Forecasting Tests",
      "file": "forecasting-tests.js",
      "result": {
        "success": true,
        "output": "🔮 Running AI Forecasting Tests...\n  🔑 Authenticating for forecasting tests...\n    ✅ Authentication successful\n  📊 Testing Prophet Forecasting...\n    ❌ Prophet Forecasting: FAIL\n  📈 Testing ARIMA Forecasting...\n    ❌ ARIMA Forecasting: FAIL\n  📉 Testing Simple Forecasting...\n    ❌ Simple Forecasting: FAIL\n  🎯 Testing Forecasting Accuracy...\n    ❌ Forecasting Accuracy: FAIL\n  ⚡ Testing Model Performance...\n    ❌ Model Performance: FAIL\n    📊 Performance Details:\n      ⚠️ prophet: 5ms (Request failed with status code 404)\n      ⚠️ arima: 7ms (Request failed with status code 404)\n      ⚠️ simple: 2ms (Request failed with status code 404)\n\n📊 AI Forecasting Test Results:\n========================================\nTotal Tests: 5\nPassed: 0 ✅\nFailed: 5 ❌\nSkipped: 0 ⚠️\nWarnings: 0 ⚠️\nSuccess Rate: 0.0%\n\nDetailed Results:\n❌ Prophet Forecasting: FAIL\n    Request failed with status code 404\n❌ ARIMA Forecasting: FAIL\n    Request failed with status code 404\n❌ Simple Forecasting: FAIL\n    Request failed with status code 404\n❌ Forecasting Accuracy: FAIL\n    Request failed with status code 404\n❌ Model Performance: FAIL\n    All models failed\n",
        "code": 0
      }
    },
    {
      "suite": "Performance Tests",
      "file": "performance-tests.js",
      "result": {
        "success": true,
        "output": "⚡ Running Performance Tests...\n  🔑 Authenticating for performance tests...\n    ✅ Authentication successful\n  ⏱️  Testing Response Time...\n    ✅ Response Time: PASS\n    📊 Response Time Details:\n      ✅ /api/stocks: 3ms \n      ⚠️ /api/crypto: 5ms (Request failed with status code 404)\n      ⚠️ /api/carbon/projects: 5ms (Request failed with status code 404)\n      ✅ /api/dashboard: 686ms \n  📊 Testing Load Testing...\n    🎯 Load Test: 100 users, 60s duration, 10s ramp-up\n    ✅ Load Testing: PASS\n    📈 Results: 99/100 successful, 1.41 req/s throughput\n  🔥 Testing Stress Testing...\n    🎯 Stress Test: 500 users, 120s duration, 30s ramp-up\n    ✅ Stress Testing: PASS\n    📈 Results: 1500/1500 successful, 0.0% error rate, 9.99 req/s throughput\n  🔄 Testing Concurrent Requests...\n    🎯 Testing 50 concurrent requests...\n    ❌ Concurrent Requests: FAIL\n    📈 Results: 0/50 successful (0.0%), Total time: 115ms\n  💾 Testing Memory Usage...\n    ✅ Memory Usage: PASS\n    📊 Memory: +0.27MB, Final: 12.26MB\n\n📊 Performance Test Results:\n========================================\nTotal Tests: 5\nPassed: 4 ✅\nFailed: 1 ❌\nWarnings: 0 ⚠️\nSuccess Rate: 80.0%\n\nDetailed Results:\n✅ Response Time: PASS\n    Average response time: 345ms (min: 3ms, max: 686ms)\n✅ Load Testing: PASS\n    Success rate: 99.0%, Throughput: 1.41 req/s, Avg response: 1403ms\n✅ Stress Testing: PASS\n    Error rate: 0.0%, Throughput: 9.99 req/s, Avg response: 4ms\n❌ Concurrent Requests: FAIL\n    Success rate: 0.0%, Total time: 115ms, 50 concurrent requests\n✅ Memory Usage: PASS\n    Memory increase: 0.27MB, Final heap: 12.26MB\n\n📊 Performance Metrics Summary:\n==================================================\nAverage Response Time: 345ms\nLoad Test Throughput: 1.41 req/s\nLoad Test Success Rate: 99.0%\n\n📁 Detailed performance report saved to: testsprite_tests/results/performance-report.json\n",
        "code": 0
      }
    },
    {
      "suite": "UI Integration Tests",
      "file": "ui-integration-tests.js",
      "result": {
        "success": true,
        "output": "🎨 Running UI Integration Tests...\n  🔑 Authenticating for UI tests...\n    ✅ Authentication successful\n  📈 Testing Stock Page Accessibility...\n    ✅ Stock Page Accessibility: PASS\n  🎯 Testing Asset Selection Logic...\n    ✅ Asset Selection Logic: PASS\n  🔮 Testing Forecast Display Logic...\n    ✅ Forecast Display Logic: PASS\n  🔀 Testing Mixed Asset Forecasts...\n    ✅ Mixed Asset Forecasts: PASS\n  🏷️  Testing Asset Type Display...\n    ✅ Asset Type Display: PASS\n\n📊 UI Integration Test Results:\n========================================\nTotal Tests: 5\nPassed: 5 ✅\nFailed: 0 ❌\nSuccess Rate: 100.0%\n\nDetailed Results:\n✅ Stock Page Accessibility: PASS\n    Stock API endpoints working - frontend can access stock data\n✅ Asset Selection Logic: PASS\n    All asset selection types (stocks, crypto, mixed) working correctly\n✅ Forecast Display Logic: PASS\n    Forecast API returns asset type information correctly\n✅ Mixed Asset Forecasts: PASS\n    Mixed asset forecasts correctly identify asset types\n✅ Asset Type Display: PASS\n    Asset type detection working correctly for all assets\n",
        "code": 0
      }
    },
    {
      "suite": "Stock Service Tests",
      "file": "stock-service-tests.js",
      "result": {
        "success": true,
        "output": "📈 Running Stock Service Tests...\n  🔑 Authenticating for stock service tests...\n    ✅ Authentication successful\n  🏥 Testing Stock Service Health...\n    ❌ Stock Service Health: FAIL\n  🔌 Testing Stock API Endpoints...\n    ✅ Stock API Endpoints: PASS\n    📊 Endpoint Status: 3/4 working\n  📊 Testing Stock Data Retrieval...\n    ❌ Stock Data Retrieval: FAIL - Data Retrieval Issues\n  🌐 Testing Stock Page Rendering...\n    ❌ Stock Page Rendering: FAIL - Page Error\n  🔐 Testing Stock Authentication...\n    ⚠️  Stock Authentication: WARN - No Auth Required\n  🔌 Testing Stock WebSocket Connection...\n",
        "code": 0
      }
    },
    {
      "suite": "Forecast Mismatch Tests",
      "file": "forecast-mismatch-tests.js",
      "result": {
        "success": true,
        "output": "🔀 Running Forecast Mismatch Tests...\n  🔑 Authenticating for forecast mismatch tests...\n    ✅ Authentication successful\n  🔍 Testing Asset Type Detection...\n    ✅ Asset Type Detection: PASS\n  📊 Testing Forecast Section Logic...\n    ✅ Forecast Section Logic: PASS\n  🔀 Testing Mixed Asset Handling...\n    ✅ Mixed Asset Handling: PASS\n  🎨 Testing UI Component Rendering...\n    ✅ UI Component Rendering: PASS\n  ✅ Testing Asset Selection Validation...\n    Debug Too Many Assets: status=400, response.data= {\"success\":false,\"isValid\":false,\"error\":\"Too many assets. Maximum allowed: 3\"}\n    Debug Too Many Assets: response.data type= object\n    Debug Too Many Assets: response.data.isValid= false\n    Debug Too Many Assets: isValid=false, expected=false\n    Debug Invalid Asset Symbol: status=400, response.data= {\"success\":false,\"isValid\":false,\"error\":\"Invalid assets: INVALID\"}\n    Debug Invalid Asset Symbol: response.data type= object\n    Debug Invalid Asset Symbol: response.data.isValid= false\n    Debug Invalid Asset Symbol: isValid=false, expected=false\n    Debug Empty Selection: status=400, response.data= {\"success\":false,\"isValid\":false,\"error\":\"No assets provided\"}\n    Debug Empty Selection: response.data type= object\n    Debug Empty Selection: response.data.isValid= false\n    Debug Empty Selection: isValid=false, expected=false\n    ✅ Asset Selection Validation: PASS\n\n📊 Forecast Mismatch Test Results:\n========================================\nTotal Tests: 5\nPassed: 5 ✅\nFailed: 0 ❌\nSuccess Rate: 100.0%\n\nDetailed Results:\n✅ Asset Type Detection: PASS\n    6/6 assets correctly typed (100%)\n✅ Forecast Section Logic: PASS\n    Assets correctly categorized into stocks and crypto sections\n✅ Mixed Asset Handling: PASS\n    Mixed asset selection properly validated and categorized\n✅ UI Component Rendering: PASS\n    Forecast API provides correct data structure for UI rendering\n✅ Asset Selection Validation: PASS\n    4/4 test cases correctly validated (100%)\n\n🔧 Forecast Mismatch Fix Recommendations:\n==================================================\n✅ All forecast mismatch tests passed! No fixes needed.\n",
        "code": 0
      }
    }
  ]
}